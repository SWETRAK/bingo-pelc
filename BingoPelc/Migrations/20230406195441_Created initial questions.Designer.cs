// <auto-generated />
using System;
using BingoPelc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BingoPelc.Migrations
{
    [DbContext(typeof(DomainContextDb))]
    [Migration("20230406195441_Created initial questions")]
    partial class Createdinitialquestions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BingoPelc.Entities.DailyBingo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 4, 6, 21, 54, 41, 644, DateTimeKind.Local).AddTicks(1940));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("daily_bingo", (string)null);
                });

            modelBuilder.Entity("BingoPelc.Entities.DailyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("DailyBingoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyBingoId");

                    b.HasIndex("QuestionId");

                    b.ToTable("daily_questions", (string)null);
                });

            modelBuilder.Entity("BingoPelc.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("question", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("52818c27-b38c-41aa-83f6-db7c828ce8fc"),
                            Title = "To co może po piwerku"
                        },
                        new
                        {
                            Id = new Guid("155f4842-2085-4534-af1e-eb734f63d909"),
                            Title = "No kurde stary, zanim ja pojade do domu i wróce to 3 godziny mijają"
                        },
                        new
                        {
                            Id = new Guid("6e19b675-408f-4e03-bee1-8dff719c9ae7"),
                            Title = "Mam spotkanie samorządu"
                        },
                        new
                        {
                            Id = new Guid("0ab85131-48c3-404c-9eed-a855971882a9"),
                            Title = "Dojeżdżam na polibudę zaraz"
                        },
                        new
                        {
                            Id = new Guid("0e9c414d-f417-45ab-a545-d5e334886a7f"),
                            Title = "Nie stać mnie"
                        },
                        new
                        {
                            Id = new Guid("37e669b7-6ab8-431a-a30f-1a3114ae7ce8"),
                            Title = "Przepraszam za spóźnienie"
                        },
                        new
                        {
                            Id = new Guid("868bda23-4e07-44e8-8da3-cb0081934b6d"),
                            Title = "Sprawdzam wnioski stypendialne"
                        },
                        new
                        {
                            Id = new Guid("11d40587-6967-4a91-b73e-35503e63a824"),
                            Title = "Kiedyś ci oddam bo nie mam teraz"
                        },
                        new
                        {
                            Id = new Guid("34c06a52-b836-4c6f-b4a3-5169409ceee1"),
                            Title = "Rada wydziału"
                        },
                        new
                        {
                            Id = new Guid("f78bfdd1-b1da-46ee-b4b2-63f4108cb140"),
                            Title = "Nie chciało mi się "
                        },
                        new
                        {
                            Id = new Guid("2c939ec9-c5c0-4383-821a-fbdab27ff964"),
                            Title = "Jak mi zapłacicie za bolta, to mogę opić"
                        },
                        new
                        {
                            Id = new Guid("d18e7181-c1fb-4797-8d15-f207743c069e"),
                            Title = "Urodziny"
                        },
                        new
                        {
                            Id = new Guid("d8628687-2ba5-4562-9cda-faab492cc596"),
                            Title = "Zachlałem"
                        },
                        new
                        {
                            Id = new Guid("6419bf9b-afc0-4237-b2ba-f50f707d73dd"),
                            Title = "Korki były"
                        },
                        new
                        {
                            Id = new Guid("11253e13-111e-4c96-94a5-9b0139df5d5b"),
                            Title = "Więcej czasu na tej jebanej uczelni spędzam niż w domu"
                        },
                        new
                        {
                            Id = new Guid("bb4b912c-4ac2-410b-a64c-83685332dd30"),
                            Title = "Chodźmy do Kazika"
                        },
                        new
                        {
                            Id = new Guid("50dfe03e-bb3a-49b5-8827-b40876ab5599"),
                            Title = "Autobus nie przyjechał"
                        },
                        new
                        {
                            Id = new Guid("0d4ed133-66b0-4fce-8016-4e45dbc909c5"),
                            Title = "Wyjechać z tej mojej wsi"
                        },
                        new
                        {
                            Id = new Guid("6ab3824d-97ed-452b-b4bc-414f6aed3cd5"),
                            Title = "Alkochol w plecaku/torbie"
                        },
                        new
                        {
                            Id = new Guid("8962d7cc-449a-483d-8861-c24e1dc8adce"),
                            Title = "EHE HE HE"
                        },
                        new
                        {
                            Id = new Guid("3455201e-dc7c-4e93-b7b0-04c1db816ece"),
                            Title = "Rowerem przyjechałem"
                        },
                        new
                        {
                            Id = new Guid("51731f78-2e7a-4183-94f5-6b0822694cef"),
                            Title = "Czego tak?"
                        },
                        new
                        {
                            Id = new Guid("bf62a012-6d18-496b-bccc-5fb749a03a7e"),
                            Title = "Kupiłem monstera za x ziko, ale mi się zwróci"
                        },
                        new
                        {
                            Id = new Guid("66f7e376-f71e-49cd-bc88-7a52b0b7dc80"),
                            Title = "Ja odpuszczam wykłady, idę do Kazika"
                        },
                        new
                        {
                            Id = new Guid("7bc213fd-65a6-446e-92b7-e1447e7bd3a7"),
                            Title = "Ja przyniosę zwolniennie na następne zajęcia"
                        });
                });

            modelBuilder.Entity("BingoPelc.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("35cb142f-5112-4d69-9c5c-6b4750362403"),
                            Email = "kamilpietrak123@gmail.com",
                            HashedPassword = "AQAAAAIAAYagAAAAECToVyUDqC/F0ti0zdYO8cyLYZ+PskefLPix6KfJZX3F/+ZrsPH7BGz7RJVM+QieeA==",
                            Nickname = "SWETRAK"
                        });
                });

            modelBuilder.Entity("BingoPelc.Entities.DailyBingo", b =>
                {
                    b.HasOne("BingoPelc.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BingoPelc.Entities.DailyQuestion", b =>
                {
                    b.HasOne("BingoPelc.Entities.DailyBingo", "DailyBingo")
                        .WithMany("DailyQuestions")
                        .HasForeignKey("DailyBingoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BingoPelc.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyBingo");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BingoPelc.Entities.DailyBingo", b =>
                {
                    b.Navigation("DailyQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
